{
    "benchmarks.PerformanceSuite.time_get_environment_flags": {
        "code": "class PerformanceSuite:\n    def time_get_environment_flags(self):\n        # Given\n        url = reverse(\"api-v1:flags\")\n    \n        # When\n        self.client.credentials(\n            HTTP_X_ENVIRONMENT_KEY=self.identity.environment.api_key\n        )\n    \n        # Then\n        for test_flags_count in range(400):\n            response = self.client.get(url)\n            assert response.status_code == status.HTTP_200_OK\n    \n        pass\n\n    def setup(self):\n        self.client = APIClient()\n    \n        for test_data_count in range(3):\n            self.organisation = Organisation.objects.create(\n                name=\"Performance Test Organisation \" + str(test_data_count)\n            )\n            self.project = Project.objects.create(\n                name=\"Performance Test Project \" + str(test_data_count),\n                organisation=self.organisation,\n            )\n            self.environment = Environment.objects.create(\n                name=\"Performance Test Environment \" + str(test_data_count),\n                project=self.project,\n            )\n            for test_feature_count in range(10):\n                self.feature = Feature.objects.create(\n                    name=\"Test Feature \" + str(test_feature_count), project=self.project\n                )\n    \n        for test_identity_count in range(5):\n            self.identity = Identity.objects.create(\n                identifier=\"test-identity-\" + str(test_identity_count),\n                environment=self.environment,\n            )",
        "min_run_count": 2,
        "name": "benchmarks.PerformanceSuite.time_get_environment_flags",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ddc7e66ad7e5bbc75421d5bb18021a4903d6995c5b985544daeaae41be89c2a8",
        "warmup_time": -1
    },
    "benchmarks.PerformanceSuite.time_get_identity_flags": {
        "code": "class PerformanceSuite:\n    def time_get_identity_flags(self):\n        # Given\n        base_url = reverse(\"api-v1:sdk-identities\")\n        url = base_url + \"?identifier=\" + self.identity.identifier\n    \n        # When\n        self.client.credentials(\n            HTTP_X_ENVIRONMENT_KEY=self.identity.environment.api_key\n        )\n    \n        # Then\n        for test_identity_count in range(400):\n            response = self.client.get(url)\n            assert response.status_code == status.HTTP_200_OK\n    \n        pass\n\n    def setup(self):\n        self.client = APIClient()\n    \n        for test_data_count in range(3):\n            self.organisation = Organisation.objects.create(\n                name=\"Performance Test Organisation \" + str(test_data_count)\n            )\n            self.project = Project.objects.create(\n                name=\"Performance Test Project \" + str(test_data_count),\n                organisation=self.organisation,\n            )\n            self.environment = Environment.objects.create(\n                name=\"Performance Test Environment \" + str(test_data_count),\n                project=self.project,\n            )\n            for test_feature_count in range(10):\n                self.feature = Feature.objects.create(\n                    name=\"Test Feature \" + str(test_feature_count), project=self.project\n                )\n    \n        for test_identity_count in range(5):\n            self.identity = Identity.objects.create(\n                identifier=\"test-identity-\" + str(test_identity_count),\n                environment=self.environment,\n            )",
        "min_run_count": 2,
        "name": "benchmarks.PerformanceSuite.time_get_identity_flags",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "b1b86e876c786dda0389bba86f88e32f54c5c24d10dabcb2c776000b51594de4",
        "warmup_time": -1
    },
    "version": 2
}