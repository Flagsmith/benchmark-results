{
    "benchmarks.PerformanceSuite.time_keys": {
        "code": "class PerformanceSuite:\n    def time_keys(self):\n        # Given\n        base_url = reverse(\"api-v1:sdk-identities\")\n        # url = base_url + \"?identifier=\" + self.identity.identifier\n    \n        # When\n        # self.client.credentials(\n        #    HTTP_X_ENVIRONMENT_KEY=self.identity.environment.api_key\n        # )\n        #\n        # for test_identity_count in range(20):\n        #    response = self.client.get(url)\n        #\n        ## Then\n        # assert response.status_code == status.HTTP_200_OK\n    \n        # and\n        # assert len(response.json().get(\"flags\")) == 2\n    \n        pass\n\n    def setup(self):\n        self.client = APIClient()\n    \n        # for test_data_count in range(3):\n        #    self.organisation = Organisation.objects.create(\n        #        name=\"Performance Test Organisation \" + str(test_data_count)\n        #    )\n        #    self.project = Project.objects.create(\n        #        name=\"Performance Test Project \" + str(test_data_count),\n        #        organisation=self.organisation,\n        #    )\n        #    self.environment = Environment.objects.create(\n        #        name=\"Performance Test Environment \" + str(test_data_count),\n        #        project=self.project,\n        #    )\n        #    for test_feature_count in range(10):\n        #        self.feature = Feature.objects.create(\n        #            name=\"Test Feature \" + str(test_feature_count), project=self.project\n        #        )",
        "min_run_count": 2,
        "name": "benchmarks.PerformanceSuite.time_keys",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "17159871e3791dd67d0d15d08ced075154025411e44ece24cad415e1bce786d2",
        "warmup_time": -1
    },
    "version": 2
}